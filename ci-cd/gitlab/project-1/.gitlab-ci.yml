stages:
  - install
  - test
  - build
  - deploy

install_dependencies:
  stage: install
  tags:
    - gitlab
  script:
    - npm install
  cache:
    paths:
      - node_modules/

run_tests:
  stage: test
  tags:
    - gitlab
  script:
    - echo "Running tests..."
    - npm test
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'

build_and_push_image:
  stage: build
  tags:
    - gitlab
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master

deploy_to_runner_vm:
  stage: deploy
  tags:
    - gitlab
  script:
    - echo "Deploying to GitLab Runner VM..."
    - |
      # Check if Docker is installed, if not, install it
      echo 'Checking Docker installation...'
      if ! command -v docker &> /dev/null
      then
        echo "Docker not found, installing Docker..."
        sudo apt-get update
        sudo apt-get install -y docker.io
      fi

      # Pull the latest Docker image
      echo 'Pulling latest image...'
      docker pull $CI_REGISTRY_IMAGE:latest

      # Stop and remove the existing container if it exists
      echo 'Stopping previous container (if exists).. .. .'
      docker stop my-app || true
      docker rm my-app || true

      # Start the new container
      echo 'Starting new container...'
      docker run -d -p 8123:3000 --name my-app $CI_REGISTRY_IMAGE:latest
  only:
    - master
